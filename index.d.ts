// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../http

declare module 'mcubed-lineup-insight-data' {
    export { default } from "mcubed-lineup-insight-data/data";
    export * from "mcubed-lineup-insight-data/interfaces";
}

declare module 'mcubed-lineup-insight-data/data' {
    import { IContest, IPlayer, IPlayerCard, ContestType, Sport, ITeamInsight } from "mcubed-lineup-insight-data/interfaces";
    export class Data {
        getContestList(contestType?: ContestType, sport?: Sport): Promise<IContest[]>;
        getPlayerCard(contestType: ContestType, contestID: string, playerID: string): Promise<IPlayerCard>;
        getPlayerInsight(contestType: ContestType, sport: Sport): Promise<IPlayer[]>;
        getTeamInsight(contestType: ContestType, sport: Sport): Promise<ITeamInsight[]>;
    }
    const _default: Data;
    export default _default;
}

declare module 'mcubed-lineup-insight-data/interfaces' {
    import * as http from "http";
    export interface IIncomingMessage extends http.IncomingMessage {
        body?: string;
    }
    export interface IPlayerCardRetriever {
        contestType: ContestType;
        playerCard: (contestID: string, playerID: string) => Promise<IPlayerCard>;
    }
    export interface IPlayerCard {
        gameLog: IPlayerCardGameStats[];
        news: IPlayerCardArticle[];
    }
    export interface IPlayerCardArticle {
        date: Date;
        details: string;
        summary: string;
    }
    export interface IPlayerCardGameStats {
        date: Date;
        opponent: string;
        points?: number;
    }
    export interface IPlayerInsightRetriever {
        playerInsight: (contest: ContestType, sport: Sport) => Promise<IPlayer[]>;
    }
    export interface IPlayer {
        ID?: string;
        injury?: IPlayerInjury;
        isStarter?: boolean;
        mlbSpecific?: IPlayerMLBSpecific;
        name: string;
        newsStatus?: NewsStatus;
        position?: string;
        salary: number;
        stats?: IPlayerStats[];
        team: string;
        thumbnailURL?: string;
    }
    export interface IPlayerMLBSpecific {
        battingOrder?: string;
        handednessBat?: string;
        handednessThrow?: string;
        isProbablePitcher?: boolean;
    }
    export interface IPlayerInjury {
        display: string;
        injuryType: InjuryType;
    }
    export interface IPlayerStats {
        source: string;
        projectedCeiling?: number;
        projectedFloor?: number;
        projectedPoints?: number;
        recentAveragePoints?: number;
        seasonAveragePoints?: number;
    }
    export interface IContestListRetriever {
        contestList: (sport: Sport) => Promise<IContest[]>;
        contestType: ContestType;
    }
    export interface IContest {
        contestType: ContestType;
        games?: IGame[];
        ID: string;
        label: string;
        maxPlayersPerTeam?: number;
        maxSalary?: number;
        playerDataLastUpdateTime?: Date;
        playerDataNextUpdateTime?: Date;
        positions?: IContestPosition[];
        sport: Sport;
        startTime?: Date;
    }
    export interface IContestPosition {
        eligiblePlayerPositions: string[];
        label: string;
    }
    export interface IGame {
        awayTeam: ITeam;
        homeTeam: ITeam;
        startTime: Date;
    }
    export interface ITeam {
        code: string;
        fullName: string;
        players?: IPlayer[];
    }
    export interface ITeamInsightRetriever {
        teamInsight: (contestType: ContestType, sport: Sport) => Promise<ITeamInsight[]>;
    }
    export interface ITeamInsight {
        code: string;
        fullName: string;
        pointsAllowedPerPosition?: IPositionPoints[];
    }
    export interface IPositionPoints {
        position: string;
        points: number;
        source: string;
    }
    export enum ContestType {
        DraftKings = 1,
        FanDuel = 2,
        Yahoo = 3
    }
    export enum DataType {
        ContestList = 1,
        PlayerCard = 2,
        PlayerInsight = 3,
        TeamInsight = 4
    }
    export enum InjuryType {
        Out = 1,
        Possible = 2,
        Probable = 3
    }
    export enum NewsStatus {
        Breaking = 1,
        Recent = 2,
        None = 3
    }
    export enum Sport {
        MLB = 1,
        NBA = 2,
        NFL = 3,
        NHL = 4
    }
}

